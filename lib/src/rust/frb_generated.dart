// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.6.0';

  @override
  int get rustContentHash => -970831604;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_frb_base',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<LibrespotPlayer> crateApiSimpleLibrespotPlayerNew(
      {required String accessToken, required String trackId});

  Future<LibrespotPlayer> crateApiSimpleLibrespotPlayerNewWithLogin5(
      {required String id, required String password, required String trackId});

  void crateApiSimpleLibrespotPlayerPause({required LibrespotPlayer that});

  void crateApiSimpleLibrespotPlayerPlay({required LibrespotPlayer that});

  Future<String?> crateApiSimplePkceOAuthSessionAccessToken(
      {required PkceOAuthSession that});

  OAuthAuthorizeUrl crateApiSimplePkceOAuthSessionAuthUrl(
      {required PkceOAuthSession that});

  Future<void> crateApiSimplePkceOAuthSessionCallback(
      {required PkceOAuthSession that, required String code});

  String crateApiSimplePkceOAuthSessionClientIdRedirectUri(
      {required String clientId});

  PkceOAuthSession crateApiSimplePkceOAuthSessionFromTokenJson(
      {required String token});

  PkceOAuthSession crateApiSimplePkceOAuthSessionNew();

  Future<String?> crateApiSimplePkceOAuthSessionRefreshToken(
      {required PkceOAuthSession that});

  Future<String?> crateApiSimplePkceOAuthSessionTokenJson(
      {required PkceOAuthSession that});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LibrespotPlayer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LibrespotPlayer;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LibrespotPlayerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PkceOAuthSession;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PkceOAuthSession;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PkceOAuthSessionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<LibrespotPlayer> crateApiSimpleLibrespotPlayerNew(
      {required String accessToken, required String trackId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(accessToken, serializer);
        sse_encode_String(trackId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleLibrespotPlayerNewConstMeta,
      argValues: [accessToken, trackId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLibrespotPlayerNewConstMeta =>
      const TaskConstMeta(
        debugName: "LibrespotPlayer_new",
        argNames: ["accessToken", "trackId"],
      );

  @override
  Future<LibrespotPlayer> crateApiSimpleLibrespotPlayerNewWithLogin5(
      {required String id, required String password, required String trackId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_String(password, serializer);
        sse_encode_String(trackId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleLibrespotPlayerNewWithLogin5ConstMeta,
      argValues: [id, password, trackId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLibrespotPlayerNewWithLogin5ConstMeta =>
      const TaskConstMeta(
        debugName: "LibrespotPlayer_new_with_login5",
        argNames: ["id", "password", "trackId"],
      );

  @override
  void crateApiSimpleLibrespotPlayerPause({required LibrespotPlayer that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleLibrespotPlayerPauseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLibrespotPlayerPauseConstMeta =>
      const TaskConstMeta(
        debugName: "LibrespotPlayer_pause",
        argNames: ["that"],
      );

  @override
  void crateApiSimpleLibrespotPlayerPlay({required LibrespotPlayer that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleLibrespotPlayerPlayConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleLibrespotPlayerPlayConstMeta =>
      const TaskConstMeta(
        debugName: "LibrespotPlayer_play",
        argNames: ["that"],
      );

  @override
  Future<String?> crateApiSimplePkceOAuthSessionAccessToken(
      {required PkceOAuthSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimplePkceOAuthSessionAccessTokenConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimplePkceOAuthSessionAccessTokenConstMeta =>
      const TaskConstMeta(
        debugName: "PkceOAuthSession_access_token",
        argNames: ["that"],
      );

  @override
  OAuthAuthorizeUrl crateApiSimplePkceOAuthSessionAuthUrl(
      {required PkceOAuthSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_o_auth_authorize_url,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimplePkceOAuthSessionAuthUrlConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimplePkceOAuthSessionAuthUrlConstMeta =>
      const TaskConstMeta(
        debugName: "PkceOAuthSession_auth_url",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiSimplePkceOAuthSessionCallback(
      {required PkceOAuthSession that, required String code}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
            that, serializer);
        sse_encode_String(code, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimplePkceOAuthSessionCallbackConstMeta,
      argValues: [that, code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimplePkceOAuthSessionCallbackConstMeta =>
      const TaskConstMeta(
        debugName: "PkceOAuthSession_callback",
        argNames: ["that", "code"],
      );

  @override
  String crateApiSimplePkceOAuthSessionClientIdRedirectUri(
      {required String clientId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimplePkceOAuthSessionClientIdRedirectUriConstMeta,
      argValues: [clientId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSimplePkceOAuthSessionClientIdRedirectUriConstMeta =>
          const TaskConstMeta(
            debugName: "PkceOAuthSession_client_id_redirect_uri",
            argNames: ["clientId"],
          );

  @override
  PkceOAuthSession crateApiSimplePkceOAuthSessionFromTokenJson(
      {required String token}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(token, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimplePkceOAuthSessionFromTokenJsonConstMeta,
      argValues: [token],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimplePkceOAuthSessionFromTokenJsonConstMeta =>
      const TaskConstMeta(
        debugName: "PkceOAuthSession_from_token_json",
        argNames: ["token"],
      );

  @override
  PkceOAuthSession crateApiSimplePkceOAuthSessionNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimplePkceOAuthSessionNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimplePkceOAuthSessionNewConstMeta =>
      const TaskConstMeta(
        debugName: "PkceOAuthSession_new",
        argNames: [],
      );

  @override
  Future<String?> crateApiSimplePkceOAuthSessionRefreshToken(
      {required PkceOAuthSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimplePkceOAuthSessionRefreshTokenConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimplePkceOAuthSessionRefreshTokenConstMeta =>
      const TaskConstMeta(
        debugName: "PkceOAuthSession_refresh_token",
        argNames: ["that"],
      );

  @override
  Future<String?> crateApiSimplePkceOAuthSessionTokenJson(
      {required PkceOAuthSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimplePkceOAuthSessionTokenJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimplePkceOAuthSessionTokenJsonConstMeta =>
      const TaskConstMeta(
        debugName: "PkceOAuthSession_token_json",
        argNames: ["that"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LibrespotPlayer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LibrespotPlayer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PkceOAuthSession => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PkceOAuthSession => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  LibrespotPlayer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LibrespotPlayerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PkceOAuthSession
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PkceOAuthSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PkceOAuthSession
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PkceOAuthSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LibrespotPlayer
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LibrespotPlayerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PkceOAuthSession
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PkceOAuthSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LibrespotPlayer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LibrespotPlayerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PkceOAuthSession
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PkceOAuthSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  OAuthAuthorizeUrl dco_decode_o_auth_authorize_url(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OAuthAuthorizeUrl(
      authUrl: dco_decode_String(arr[0]),
      redirectUrl: dco_decode_String(arr[1]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  LibrespotPlayer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LibrespotPlayerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PkceOAuthSession
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PkceOAuthSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PkceOAuthSession
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PkceOAuthSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LibrespotPlayer
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LibrespotPlayerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PkceOAuthSession
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PkceOAuthSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LibrespotPlayer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LibrespotPlayerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PkceOAuthSession
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PkceOAuthSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  OAuthAuthorizeUrl sse_decode_o_auth_authorize_url(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_authUrl = sse_decode_String(deserializer);
    var var_redirectUrl = sse_decode_String(deserializer);
    return OAuthAuthorizeUrl(
        authUrl: var_authUrl, redirectUrl: var_redirectUrl);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
          LibrespotPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LibrespotPlayerImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          PkceOAuthSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PkceOAuthSessionImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          PkceOAuthSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PkceOAuthSessionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
          LibrespotPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LibrespotPlayerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          PkceOAuthSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PkceOAuthSessionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLibrespotPlayer(
          LibrespotPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LibrespotPlayerImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPkceOAuthSession(
          PkceOAuthSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PkceOAuthSessionImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_o_auth_authorize_url(
      OAuthAuthorizeUrl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.authUrl, serializer);
    sse_encode_String(self.redirectUrl, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class LibrespotPlayerImpl extends RustOpaque implements LibrespotPlayer {
  // Not to be used by end users
  LibrespotPlayerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LibrespotPlayerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LibrespotPlayer,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LibrespotPlayer,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LibrespotPlayerPtr,
  );

  void pause() => RustLib.instance.api.crateApiSimpleLibrespotPlayerPause(
        that: this,
      );

  void play() => RustLib.instance.api.crateApiSimpleLibrespotPlayerPlay(
        that: this,
      );
}

@sealed
class PkceOAuthSessionImpl extends RustOpaque implements PkceOAuthSession {
  // Not to be used by end users
  PkceOAuthSessionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PkceOAuthSessionImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PkceOAuthSession,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PkceOAuthSession,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_PkceOAuthSessionPtr,
  );

  Future<String?> accessToken() =>
      RustLib.instance.api.crateApiSimplePkceOAuthSessionAccessToken(
        that: this,
      );

  OAuthAuthorizeUrl authUrl() =>
      RustLib.instance.api.crateApiSimplePkceOAuthSessionAuthUrl(
        that: this,
      );

  Future<void> callback({required String code}) => RustLib.instance.api
      .crateApiSimplePkceOAuthSessionCallback(that: this, code: code);

  Future<String?> refreshToken() =>
      RustLib.instance.api.crateApiSimplePkceOAuthSessionRefreshToken(
        that: this,
      );

  Future<String?> tokenJson() =>
      RustLib.instance.api.crateApiSimplePkceOAuthSessionTokenJson(
        that: this,
      );
}
